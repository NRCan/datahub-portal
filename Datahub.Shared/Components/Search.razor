@using NRCan.Datahub.Shared.Data
@using NRCan.Datahub.Shared.Data.FGP
@using Newtonsoft.Json
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject IMSGraphService MSGraphService
@inject IUserInformationService UserInformationService

<AeSearchInput id="topSearch" Placeholder="@Localizer.GetString("Search...")" OnInputChangeWithLastKey="(v, e) => HandleSearch(v, e)" ClearIconFAClass="null"/>

<Popup Show="isSearching || hasResults" class="search-popup" OnCloseClick="CloseSearch">
    <ChildContent>
        <div class="search-list-container">
            @if (hasResults)
            {
                if (ApiService.SearchDataFolder.AllFiles.Count == 0)
                {
                    <div class="grid-item">
                        <div class="textcontent large-text">@Localizer["No results found"]</div>
                    </div>
                }
                @foreach(FileMetaData file in ApiService.SearchDataFolder.AllFiles)
                {
                    <div class="search-grid-row" @ondblclick="() => DownloadFile(file)">
                        <div class="grid-item icons">
                            @if (!string.IsNullOrWhiteSpace(isDownloadingFileId) && isDownloadingFileId == file.fileid)
                            {
                                <Spinner Small="true" />
                            }
                            else
                            {
                                <i class="@GetFileTypeIcon(file)"></i>
                            }
                        </div>
                        <div class="grid-item">
                            <div class="textcontent large-text">@file.filename</div>
                            <div class="break"></div>
                            <div class="textcontent small-text">@displayInfo(file)</div>
                        </div>
                        <div class="grid-item">
                            <div class="textcontent" style="justify-content: flex-end;">
                                @displayDate(file.lastmodifiedts)
                            </div>
                        </div>
                    </div>
                }
                if (geoCoreResult != null && geoCoreResult.Count > 0) 
                {
                    <hr />
                    <h4>FGP Results</h4>
                    <div class="search-grid-row">
                        <div class="grid-item"><h5>Topic / Category</h5></div>
                        <div class="grid-item"><h5>Title</h5></div>
                        <div class="grid-item"><h5>Created</h5></div>
                    </div>
                    @foreach (var gcItem in geoCoreResult.Items)
                    {
                        <div class="search-grid-row">
                            <div class="grid-item">@gcItem.TopicCategory</div>
                            <div class="grid-item">@gcItem.Title</div>
                            <div class="grid-item">@gcItem.Created</div>
                        </div>
                    }
                }
            }
            else
            {
                <Spinner Small="true" />
            }
        </div>
    </ChildContent>
    <Footer>
        <button class="submitbutton cancel" type="submit" @onclick="() => CloseSearch()">@Localizer["Close"]</button>
        <button class="submitbutton finish" type="submit" @onclick="() => GotoSearchPage()">@Localizer["Goto search page"]</button>
    </Footer>
</Popup>
   
@code
{
    private static readonly string FGP_SEARCH_API_URL = "https://hqdatl0f6d.execute-api.ca-central-1.amazonaws.com/dev/geo";

    // Have we searched already since init control.
    // If so any change to search text will cause a search to occur
    public bool searchedAlready { get; set; }
    public string searchText { get; set; }

    public bool hasResults { get; set; }

    public bool isSearching { get; set; }
    public string isDownloadingFileId { get; set; }

    public GeoCoreSearchResult geoCoreResult { get; set; }

    private Microsoft.Graph.User _currentUser;

    protected string GetFileTypeIcon(FileMetaData file)
    {
        return $"{DatahubTools.GetFileTypeIcon(file.fileformat)} fa-2x";        
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _currentUser = await UserInformationService.GetCurrentUserAsync();
    }

    private async void CloseSearch()
    {
        isSearching = false;
        hasResults = false;
        searchedAlready = false;
        ApiService.SearchDataFolder.Clear();

        StateHasChanged();
    }

    public async Task DownloadFile(FileMetaData file)
    {
        isDownloadingFileId = file.fileid;
        StateHasChanged();

        await ApiService.DownloadFile(file);

        isDownloadingFileId = "";
        StateHasChanged();
    }

    public string displayInfo(FileMetaData file)
    {
        return $"{MSGraphService.GetUserName(file.ownedby)} {Localizer["created this on"]} {displayDate(file.createdts)}";
    }

    public string displayDate(DateTime date)
    {
        if (date.Year == DateTime.Now.Year)
        {
            return date.ToString("MMM d");
        }

        return date.ToString("M/d/yy");
    }

    public void GotoSearchPage()
    {
        isSearching = false;
        hasResults = false;
        StateHasChanged();
        NavigationManager.NavigateTo($"/search/{searchText}");
    }

    //TODO move this method to a service class
    private async Task<GeoCoreSearchResult> SearchFGPByKeyword(string keyword) 
    {
        using (var request = new HttpRequestMessage())
        {
            request.Method = HttpMethod.Get;
            request.RequestUri = new Uri($"{FGP_SEARCH_API_URL}?keyword_only=true&lang=en&keyword={keyword}");
            var httpClient = new HttpClient();
            using (var response = await httpClient.SendAsync(request))
            {
                var content = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<GeoCoreSearchResult>(content);
                return result;
            }
        }
    }

    private async Task HandleSearch(string newValue, KeyboardEventArgs ev)
    {
        searchText = newValue;
        if (ev?.Code == "Enter" || searchedAlready || (!string.IsNullOrWhiteSpace(newValue) && newValue.Length >= 4))
        {
            // Clear previous results
            ApiService.SearchDataFolder.Clear();
            isSearching = true;
            hasResults = false;
            geoCoreResult = null;
            StateHasChanged();

            string filter = $"search.ismatch('{newValue}*', 'filename', 'full', 'any') and ownedby eq '{_currentUser.Id}'";
            await ApiService.SearchIndex(ApiService.SearchDataFolder, filter, _currentUser);
            geoCoreResult = await SearchFGPByKeyword(searchText);
            isSearching = false;
            hasResults = true;
            searchedAlready = true;
            StateHasChanged();
        }
    }
}
