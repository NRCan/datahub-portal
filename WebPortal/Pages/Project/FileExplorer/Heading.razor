@*Heading.razor*@
@inject IDataRemovalService _dataRemovalService
@inject DataRetrievalService _dataRetrievalService
@inject NavigationManager NavigationManager
@inject IUserInformationService _userInformationService
@inject IJSRuntime _jsRuntime

<div class="heading">
    <AeTypography Variant="h1">@Localizer["Storage Explorer"]</AeTypography>
    <div class="breadcrumbs">
        @if (_containers != null)
        {
        @foreach (var container in _containers)
        {
            <AeButton class="light" @onclick="@(() => SetContainer(container))">@container</AeButton>
        }
        }
        @foreach (var folder in CurrentFolder.Split("/").Where(s => !string.IsNullOrWhiteSpace(s)))
        {
            <i class="fas fa-chevron-right"></i>
            <AeButton class="light" @onclick="@(async () => await BreadcrumbClicked(folder))">@folder</AeButton>
        }
    </div>
    <div class="actions">
        <AeButton class="button-tool" onclick="document.querySelector('.file-list .dropzone-container input').click();">
            <i class="fas fa-upload"></i>
            @Localizer["Upload"]
        </AeButton>

        <AeButton class="button-tool" @onclick="HandleDownload" Disabled="!_isExistingFile">
            <i class="fas fa-download"></i>
            @Localizer["Download"]
        </AeButton>

        <span class="tool-divider"></span>

        <AeButton class="button-tool" @onclick="HandleShare" Disabled="!_ownsSelectedFile">
            <i class="fas fa-share-square"></i>
            @Localizer["Share"]
        </AeButton>            

        <span class="tool-divider"></span>

        <AeButton class="button-tool" @onclick="HandleDelete" Disabled="!_ownsSelectedFile">
            <i class="fas fa-trash-alt"></i>
            @Localizer["Delete"]
        </AeButton>

        <span class="tool-divider"></span>

        <AeButton class="button-tool" @onclick="HandleNewFolder">
            <i class="fas fa-folder-plus"></i>
            @Localizer["New Folder"]
        </AeButton>
    </div>
</div>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.User GraphUser { get; set; }

    [Parameter]
    public string CurrentFolder { get; set; }

    [Parameter]
    public string SelectedItem { get; set; }

    [Parameter]
    public Dictionary<string, List<FileMetaData>> VirtualDirectory { get; set; }

    [Parameter]
    public EventCallback<(string,string)> SetCurrentFolder { get; set; }

    [Parameter]
    public EventCallback<string> OnFileDelete { get; set; }

    [Parameter]
    public EventCallback<string> OnNewFolder { get; set; }

    private IJSObjectReference _module;

    private FileMetaData _selectedFile;
    private bool _ownsSelectedFile;
    private bool _isExistingFile;
    private Microsoft.Graph.User _user;

    private List<string> _containers;
    private string _currentContainer;

    private void SetContainer(string container)
    {
        SetCurrentFolder.InvokeAsync((container,"/"));
        _currentContainer = container;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./Pages/Project/FileExplorer/Heading.razor.js");
    }

    protected override async Task OnParametersSetAsync()
    {
        _isExistingFile = !VirtualDirectory.ContainsKey(SelectedItem);
        _selectedFile = VirtualDirectory[CurrentFolder]?.FirstOrDefault(f => f.name == SelectedItem);
        _ownsSelectedFile = _selectedFile?.ownedby.Equals(GraphUser.Id, StringComparison.InvariantCulture) == true;
        if (_containers == null)
        {
            _user = await _userInformationService.GetUserAsync();
            _containers = await _dataRetrievalService.ListContainers(ProjectAcronym, _user);
            _currentContainer = _containers.First();
        }

    }

    private async Task BreadcrumbClicked(string breadcrumb)
    {
        var index = CurrentFolder.IndexOf(breadcrumb, StringComparison.OrdinalIgnoreCase);
        await SetCurrentFolder.InvokeAsync((_currentContainer,CurrentFolder[..(index + breadcrumb.Length)] + "/"));
    }

    private async Task HandleDownload()
    {
        if (_selectedFile is not null)
        {
            var uri = await _dataRetrievalService.DownloadFile(DataRetrievalService.DEFAULT_CONTAINER_NAME, _selectedFile, ProjectAcronym);
            await _jsRuntime.InvokeVoidAsync("open", uri.ToString(), "_blank");
        }
    }

    private void HandleShare()
    {
        if (_selectedFile is null)
            return;

        var sb = new System.Text.StringBuilder();
        sb.Append("/sharingworkflow/");
        sb.Append(_selectedFile.fileid);
        sb.Append("?filename=");
        sb.Append(_selectedFile.filename);
        if (!string.IsNullOrWhiteSpace(ProjectAcronym))
        {
            sb.Append("&project=");
            sb.Append(ProjectAcronym);
        }
        else
        {
            sb.Append("&folderpath=");
            sb.Append(_selectedFile.folderpath);
        }

        NavigationManager.NavigateTo(sb.ToString());     
    }

    private async Task HandleDelete()
    {
        if (_selectedFile is not null)
        {
            var success = await _dataRemovalService.DeleteStorageBlob(_selectedFile, ProjectAcronym, GraphUser);
            if (success)
            {
                await OnFileDelete.InvokeAsync(_selectedFile.name);
            }
        }
    }

    private async Task HandleNewFolder()
    {
        var newFolderName = await _module.InvokeAsync<string>("promptForNewFolderName");
        if (!string.IsNullOrWhiteSpace(newFolderName))
        {
            await OnNewFolder.InvokeAsync(newFolderName.Trim());
        }
    }
}