@page "/project/storage/{StorageGUID}"
@inject IStringLocalizer<FileList> Localizer
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject IApiService ApiService

@if (_storage is null)
{
    <Spinner Small=@true />
}
else
{
<DHPageTitle PageTitleKey=@(_storage.Project.ProjectName + " " + Localizer["Storage Explorer"])/>

<div style="padding-left: 2rem;padding-right: 2rem;padding-bottom: 2rem">
    <AeFlex Vertical>
        <AeTypography Variant="h2">@Localizer["Storage Explorer"]</AeTypography>
    </AeFlex>
    <AeCard>
        <Header>
            <AeTypography Variant="h3">@_storage.Project.ProjectName</AeTypography>
        </Header>
        <ChildContent>
            <FileGrid CurrentFolder="null" CanAddData="true" Storage="@_storage.Id" />
        </ChildContent>
    </AeCard>

</div>

<div style="padding-left: 2rem;padding-right: 2rem">
        <AeCard>
        <Header>
            <AeTypography>AzCopy Access</AeTypography>
        </Header>
        <ChildContent>
                <div style="margin-bottom: 10px">
                    @if (_tempToken is null)
                    {
                        <div>Request SAS Token for 14 days <AeButton OnClickEvent="() => GenerateSASToken(14)">Generate Token</AeButton></div>
                    }
                    else
                    {
                        <div>SAS Token for 14 days: </div>
                        <div>@_tempToken</div>
                    }
                </div>                
        </ChildContent>
    </AeCard>

</div>

<div>
    <Resources PageName="Use-AzCopy-to-Interact-with-Azure-Storage-Account" Substitutions="_substitutions" />
</div>

<div>
    <Resources PageName="Datahub-AzureStorage" />
</div>
}

@code {

    [Parameter]
    public string StorageGUID { get; set; }


    private List<(string, string)> _substitutions;

    private string? _tempToken;

    private Project_Storage _storage;

    protected override async Task OnInitializedAsync()
    {
        using var projectContext = DbFactoryProject.CreateDbContext();
        _storage = await projectContext.Project_Storage.Include(s => s.Project).FirstOrDefaultAsync(s => s.Id == Guid.Parse(StorageGUID));  
    }

    private async Task GenerateSASToken(int days)
    {
        var uri = await ApiService.GenerateSasToken(_storage.Id, 14);
        _tempToken = uri.ToString();
        _substitutions = new List<(string, string)>() { ("<sas_uri>",_tempToken) };
        StateHasChanged();
    }
}
