@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore;
@inject IStringLocalizer<DataLabels> DataLocalizer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject DatahubProjectDBContext projectContext
@inject IDbContextFactory<DatahubProjectDBContext> dbFactory
@inject IEmailNotificationService EmailService
@page "/admin"


<AuthorizeView Roles="project-admin">
    <Authorized>
        <h1>@Localizer["Authorize Users"]</h1>

        @if (_usersAuthorization != null)
        {
            <AeTable Accessors="accessorFunctions"
                     Dataset="_usersAuthorization"
                     Renderers="renderFunctions"
                     Headers="headers" />
        }
        else
        {
            <div>Loading data...</div>
        }

        @* TODO: delete this *@
        <div>
            <AeButton @onclick="async () => await SendTestEmail()">Send test email</AeButton>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>This page is limited for datahub administrators</h1>
        @* TODO: delete this *@
        @* <div>
            <AeButton @onclick="async () => await SendTestEmail()">Send test email</AeButton>
        </div> *@
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<Datahub_Project_Access_Request> _usersAuthorization;

    private List<string> headers = new List<string>
{
        "Project", "User", "Service", "Date","Actions"
    };

    private async Task SendTestEmail()
    {
        var user = (await authenticationStateTask).User;
        var email = user.Identity.Name;
        var name = user.Claims.Where(c => c.Type == "name").FirstOrDefault()?.Value;

        await EmailService.SendEmailMessage("Test", "If you can read this, it works", name, email, isHtml: false);
    }

    // Accessor functions to retrieve cell value
    private List<Func<Datahub_Project_Access_Request, string>> accessorFunctions = new List<Func<Datahub_Project_Access_Request, string>>
{
        new Func<Datahub_Project_Access_Request, string>(p => { return p.Project.Project_Name; }),
        new Func<Datahub_Project_Access_Request, string>(p => { return p.User_Name; }),
        new Func<Datahub_Project_Access_Request, string>(p => { return (p.Databricks ? "Databricks" : (p.PowerBI ? "PowerBI" : "Web Forms")); }),
        new Func<Datahub_Project_Access_Request, string>(p => { return p.Request_DT.ToShortDateString(); }),
        new Func<Datahub_Project_Access_Request, string>(p => { return ".."; }),
    };

    // [Optional] Can define custom rendering for columns, order matters
    private List<Func<Datahub_Project_Access_Request, RenderFragment>> renderFunctions;

    private void GetServiceType(Datahub_Project_Access_Request request)
    { 
    
    }
  private async Task AuthorizeUser(Datahub_Project_Access_Request r)
    {
        r.Completion_DT = DateTime.UtcNow;
        await projectContext.SaveChangesAsync();
        await RefreshData();
    }

    private async Task RefreshData()
    {
        var user = (await authenticationStateTask).User;
        if (user.IsInRole("datahub-admin"))
        {
            _usersAuthorization = await projectContext.Access_Requests.Include(a => a.Project).OrderByDescending(a => a.Request_DT).ToListAsync();
        }
        else
        {
            var email = user.Identity.Name;
            using var ctx = dbFactory.CreateDbContext();
            var allProjectAdminsList = (await ctx.Projects.Where(p => p.Project_Admin != null).ToListAsync()).Select(p => (p.Project_ID, p.Project_Admin)).ToList();
            var validProjects = allProjectAdminsList.Where(tp => (ServiceAuthManager.ExtractEmails(tp.Project_Admin)?.Contains(email.ToLowerInvariant()) ?? false)).Select(p => p.Project_ID).ToHashSet();
            var allAuths = await projectContext.Access_Requests.Include(a => a.Project).OrderByDescending(a => a.Request_DT).ToListAsync();
            _usersAuthorization = allAuths.Where(a => validProjects.Contains(a.Project.Project_ID)).ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        renderFunctions = new List<Func<Datahub_Project_Access_Request, RenderFragment>>
{
                null,
                null,
                null,
                null,
                new Func<Datahub_Project_Access_Request, RenderFragment>(a => {
                    if (a.Completion_DT != null)
                    {
                        return @<div>@Localizer["Authorized"]</div>;
                    }
                   else
      
                 {
                       return @<AeButton @onclick="async () => await AuthorizeUser(a)">Authorize user</AeButton>;
                   }
                })

        };
                                }

}
