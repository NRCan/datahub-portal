@using MudBlazor
@using Datahub.Finance.Data
@inject IStringLocalizer Localizer
@implements IDisposable
@inject IDbContextFactory<FinanceDBContext> DbFactory
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IUserInformationService UserInformationService
@inject ServiceAuthManager ServiceAuthManager

@code {


    [Parameter]
    public string Email { get; set; }
    [Parameter]
    public string Branch { get; set; }
    [Parameter]
    public EventCallback<bool> IsValid { get; set; }
    private const string PROJECTACRONYM = "FINGC";

    private FinanceDBContext Context;

    protected async override Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        var user = await UserInformationService.GetCurrentGraphUserAsync();
        var isValid = Context.BranchAccess.Any(b => b.User.ToLower() == Email.ToLower() && b.BranchFundCenter.Trim() == Branch.Trim());
        var isUserAdmin = await ServiceAuthManager.IsProjectAdmin(user.Id, PROJECTACRONYM);
        isValid = isValid || isUserAdmin;
        if (!isValid)
        {
            Snackbar.Add(Localizer["Access Denied"]);
            NavigationManager.NavigateTo($"/home");
        }
        else
        {
            await IsValid.InvokeAsync(isValid);
        }
    }

    public void Dispose()
    {
        Context.Dispose();
    }
}
