@page "/login"

@inject NavigationManager _navigationManager
@inject IUserInformationService _userInformationService

@*<h3>Login</h3>

<MudButton @onclick="@HandleLogin">Log in</MudButton>*@
<MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;position: fixed;top: 50%;left: 50%;" Indeterminate="true" />

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string redirectUri { get; set; }

    private void HandleLogin()
    {
        //See https://stackoverflow.com/questions/64853618/oidc-authentication-in-server-side-blazor for an alternative
        var url = $"{_navigationManager.BaseUri}MicrosoftIdentity/Account/Challenge?redirectUri={redirectUri}&scope=user.read%20openid%20offline_access%20profile&loginHint=&domainHint=&claims=&policy=";
        //var url = $"{_navigationManager.BaseUri}MicrosoftIdentity/Account/Challenge?redirectUri={_navigationManager.BaseUri}&scope=user.read%20openid%20offline_access%20profile&loginHint=&domainHint=&claims=&policy=";
        _navigationManager.NavigateTo(url, true);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = await _userInformationService.GetAuthenticatedUser(true);
        if (user.Identity?.IsAuthenticated == true)
        {
            _navigationManager.NavigateTo("/");
        }
        else
        {
            //See https://stackoverflow.com/questions/64853618/oidc-authentication-in-server-side-blazor for an alternative
            if (string.IsNullOrWhiteSpace(redirectUri))
            {
                redirectUri = _navigationManager.BaseUri;
            }
            var url = $"{_navigationManager.BaseUri}MicrosoftIdentity/Account/Challenge?redirectUri={redirectUri}&scope=user.read%20openid%20offline_access%20profile&loginHint=&domainHint=&claims=&policy="; 
            _navigationManager.NavigateTo(url, true);
        }
    }

}
